Given a 2D board and a word, find if the word exists in the grid.
The word can be constructed from letters of sequentially adjacent cell, where "adjacent" cells are those horizontally or vertically neighboring. The same letter cell may not be used more than once.

For example,
Given board =
[
  ['A','B','C','E'],
  ['S','F','C','S'],
  ['A','D','E','E']
]
word = "ABCCED", -> returns true,
word = "SEE", -> returns true,
word = "ABCB", -> returns false.

此题核心是深度优先搜索

class Solution {
public:
	bool dfs(vector<vector<char>>& board,string& word,int curIndex,int r,int c)
	{
	        /* 先进行坐标合法性判断 */
		if(r<0 || r>=board.size() || c<0 || c>=board[0].size()){
			return false;
		}
		
		if(curIndex < word.size() && word[curIndex]!=board[r][c]){
			return false;
		}
		
		/* 先判断当前是否word的最后一个字符，如果是则找到了，直接返回，如果不是继续比较word的后一串是否能再board中找                    到 
		*/
		if((curIndex+1) == word.size()){
			return true;
		}
		char tmp = board[r][c];//递归结束后还要回复状态
		board[r][c] = '#';
		bool res = dfs(board,word,curIndex+1,r-1,c) || dfs(board,word,curIndex+1,r,c+1)||
			dfs(board,word,curIndex+1,r+1,c) || dfs(board,word,curIndex+1,r,c-1);
		if(res){
			return true;
		}
		board[r][c] = tmp ;
		return false;
	}

public:
	bool exist(vector<vector<char>>& board, string word) {
		if(board.size()<0 || word.size()<0){
			return false;
		}
		int irepeatTime = board.size();
		int jrepeatTime = board[0].size();
		for(int i=0;i<irepeatTime;i++){
			for(int j=0;j<jrepeatTime;j++){
				if(dfs(board,word,0,i,j)){
					return true;
				}
			}
		}
		return false;
	}
};
